import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from urllib.parse import urljoin
from loguru import logger
from db import init_db, save_org, is_in_db, get_random_orgs, get_user_count, get_org_count, get_city_count
from playwright.async_api import async_playwright

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.add("logs.log", format="{time} | {level} | {message}", level="DEBUG", colorize=True)

load_dotenv()
bot = Bot(token=os.getenv("TG_TOKEN"))
dp = Dispatcher()

ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_ID = os.getenv("CHANNEL_ID")
users_state = {}
search_requests_count = 0  # —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_user_subscribed(bot, user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ("member", "creator", "administrator")
    except:
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    if not await is_user_subscribed(bot, message.from_user.id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/send?start=SBmP_zOgHI7mY4ZWNi")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="check_access")]
        ])
        await message.answer("‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
        return

    if message.from_user.id != ADMIN_ID:
        user_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")]
        ], resize_keyboard=True)
        await message.answer(
            "üëã –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–∏–∑–Ω–µ—Å—ã –±–µ–∑ —Å–∞–π—Ç–æ–≤ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
            "–ù–∞–∂–º–∏ /find –ú–æ—Å–∫–≤–∞ –∫–∞—Ñ–µ 10\n"
            "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
            reply_markup=user_kb
        )
    else:
        await message.answer(
            "üëã –ê–¥–º–∏–Ω, –Ω–∞–ø–∏—à–∏ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
@dp.message(F.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def handle_start_search(message: types.Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    users_state[message.from_user.id] = {"step": "city"}

@dp.message(lambda msg: msg.from_user.id in users_state)
async def step_handler(message: types.Message):
    state = users_state.get(message.from_user.id, {})
    if state["step"] == "city":
        state["city"] = message.text
        state["step"] = "type"
        await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—Ñ–µ):")
    elif state["step"] == "type":
        state["type"] = message.text
        state["step"] = "count"
        await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π—Ç–∏? (–º–∞–∫—Å 50):")
    elif state["step"] == "count":
        try:
            count = min(max(int(message.text), 1), 50)
        except:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50.")
            return
        state["count"] = count
        await message.answer(f"üîç –ò—â—É '{state['type']}' –≤ –≥–æ—Ä–æ–¥–µ {state['city']}...")
        await search_and_send(message, state["city"], state["type"], state["count"])
        users_state.pop(message.from_user.id, None)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
@dp.callback_query(lambda c: c.data == "check_access")
async def check_access(call: types.CallbackQuery):
    if await is_user_subscribed(bot, call.from_user.id):
        await call.message.answer("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ù–∞–ø–∏—à–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
    else:
        await call.message.answer("‚õî –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(Command("admin"))
async def handle_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@dp.callback_query(F.data == "stats")
async def stats(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î –∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    user_count = await get_user_count()
    org_count = await get_org_count()
    city_count = await get_city_count()
    global search_requests_count

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
        f"üè¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –±–∞–∑–µ: {org_count}\n"
        f"üåÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ: {city_count}\n"
        f"üîé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {search_requests_count}\n"
        f"\n"
        f"üïí –õ–æ–≥–∏ –ø–æ–∏—Å–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ñ–∞–π–ª–µ logs.log"
    )
    await call.message.answer(text)

# –ö–æ–º–∞–Ω–¥–∞ /find
@dp.message(Command("find"))
async def handle_find(message: types.Message):
    try:
        _, city, biz_type, limit = message.text.split(" ", 3)
        limit = min(max(int(limit), 1), 50)
    except:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /find –ú–æ—Å–∫–≤–∞ –∫–∞—Ñ–µ 10")
        return
    await message.answer(f"üîç –ò—â—É '{biz_type}' –≤ –≥–æ—Ä–æ–¥–µ {city}...")
    global search_requests_count
    search_requests_count += 1
    await search_and_send(message, city, biz_type, limit)

# –ö–æ–º–∞–Ω–¥–∞ /base
@dp.message(Command("base"))
async def handle_base(message: types.Message):
    try:
        _, city, count = message.text.split(" ", 2)
        count = int(count)
    except:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /base –ú–æ—Å–∫–≤–∞ 10")
        return

    records = await get_random_orgs(city, count)
    if not records:
        await message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É.")
        return

    for title, address, phone, link in records:
        text = f"üè¢ {title}\nüìç –ê–¥—Ä–µ—Å: {address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüåê –°–∞–π—Ç: ‚ùå –ù–µ—Ç"
        btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", url=link)]
        ])
        await message.answer(text, reply_markup=btn)

# –ü–æ–∏—Å–∫ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def search_and_send(message, city, biz_type, limit):
    count_found = 0
    logger.info(f"–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫: –≥–æ—Ä–æ–¥='{city}', —Ç–∏–ø='{biz_type}', –ª–∏–º–∏—Ç={limit}")

    async def on_item_found(org):
        nonlocal count_found
        count_found += 1
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org['title']} | {org['address']} | {org['phone']} | {org['link']}")
        await message.answer(
            f"üè¢ {org['title']}\nüìç –ê–¥—Ä–µ—Å: {org['address']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {org['phone']}\nüåê –°–∞–π—Ç: ‚ùå –ù–µ—Ç",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", url=org['link'])]
            ])
        )

    await parse_yandex_maps(city, biz_type, limit, on_item_found)

    if count_found == 0:
        logger.info("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤—Å–µ—Ö –µ—Å—Ç—å —Å–∞–π—Ç—ã.")
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤—Å–µ—Ö –µ—Å—Ç—å —Å–∞–π—Ç—ã.")
    else:
        logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {count_found} –∫–æ–º–ø–∞–Ω–∏–π –±–µ–∑ —Å–∞–π—Ç–∞.")
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {count_found} –∫–æ–º–ø–∞–Ω–∏–π –±–µ–∑ —Å–∞–π—Ç–∞.")

# –ü–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def parse_yandex_maps(city, biz_type, limit, on_item_found):
    base_url = "https://yandex.ru"
    url = f"{base_url}/maps/?text={city}+{biz_type}"

    logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –ø–æ URL: {url}")
    async with async_playwright() as p:
        browser = await p.firefox.launch(headless=True)
        page = await browser.new_page()
        await page.goto(url)
        await page.wait_for_selector(".search-business-snippet-view__content", timeout=10000)

        found, seen = 0, set()
        while found < limit:
            cards = await page.query_selector_all(".search-business-snippet-view__content")
            if not cards:
                logger.debug("–ù–µ—Ç –±–∏–∑–Ω–µ—Å-–∫–∞—Ä—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å–ø–∏—Å–æ–∫.")
                break

            for card in cards:
                if found >= limit:
                    break

                try:
                    link_el = await card.query_selector("a")
                    href = await link_el.get_attribute("href")
                    if not href:
                        continue
                    href = href.split("/reviews")[0]
                    full_url = urljoin(base_url, href)

                    if full_url in seen:
                        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {full_url}")
                        continue
                    if await is_in_db(full_url):
                        logger.debug(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤ –±–∞–∑–µ: {full_url}")
                        continue
                    seen.add(full_url)

                    detail_page = await browser.new_page()
                    await detail_page.goto(full_url)
                    await detail_page.wait_for_timeout(2000)

                    title_el = await detail_page.query_selector("h1")
                    title = (await title_el.text_content()).strip() if title_el else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                    addr_el = await detail_page.query_selector('div[class*="address"]')
                    address = (await addr_el.text_content()).strip() if addr_el else "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

                    phone_el = await detail_page.query_selector('.card-phones-view__phone-number')
                    if not phone_el:
                        phone_el = await detail_page.query_selector('.orgpage-phones-view__phone-number')
                    phone = (await phone_el.text_content()).strip() if phone_el else "–ù–µ —É–∫–∞–∑–∞–Ω"

                    site_url = None
                    links = await detail_page.query_selector_all('a[href^="http"]')
                    for l in links:
                        href2 = await l.get_attribute("href")
                        if href2 and not any(d in href2 for d in ["yandex", "vk.com", "t.me", "instagram", "wa.me", "facebook", "ya.ru"]):
                            site_url = href2
                            break

                    await detail_page.close()

                    if site_url:
                        logger.debug(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–µ—Ç —Å–∞–π—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {title} - {site_url}")
                        continue

                    await save_org(city, title, address, phone, full_url)
                    await on_item_found({"title": title, "address": address, "phone": phone, "link": full_url})
                    found += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                    continue

            await page.evaluate("""
                () => {
                    const container = document.querySelector("div.scroll__container");
                    if (container) container.scrollTop = container.scrollHeight;
                }
            """)
            await page.wait_for_timeout(1500)

        await browser.close()
        logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {found} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –±–µ–∑ —Å–∞–π—Ç–∞.")

if __name__ == "__main__":
    asyncio.run(init_db())
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    asyncio.run(dp.start_polling(bot))
